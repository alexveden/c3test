================================================================================
simple_main
================================================================================

fn void 
main() { return;}

--------------------------------------------------------------------------------

fn void main()
{
    return;
}

================================================================================
simple_main_int
================================================================================

fn int 
main(
String[] args
) { return   0   ;}

--------------------------------------------------------------------------------

fn int main(String[] args)
{
    return 0;
}

================================================================================
ret_generic_list
================================================================================

fn List(<int>) 
main(
String[] args
) { return   0   ;}

--------------------------------------------------------------------------------

fn List(<int>) main(String[] args)
{
    return 0;
}

================================================================================
ret_generic_list_pointer_opt
================================================================================

fn List(<int>)*! 
main(
String[] args
) { return   0   ;}

--------------------------------------------------------------------------------

fn List(<int>)*! main(String[] args)
{
    return 0;
}

================================================================================
ret_generic_method
================================================================================

fn List(<int>)*! 
Foo.main(
String[] args
) { return   0   ;}

--------------------------------------------------------------------------------

fn List(<int>)*! Foo.main(String[] args)
{
    return 0;
}

================================================================================
ret_generic_method_attrs
================================================================================

fn List(<int>) * ! 
Foo.main(
String[] args
) @test @if("dio" || too) { return   0   ;}

--------------------------------------------------------------------------------

fn List(<int>)*! Foo.main(String[] args) @test @if("dio" || too)
{
    return 0;
}

================================================================================
returns_array_type
================================================================================

fn String[]! 
Foo.main(
String[] args
) { return   0   ;}

--------------------------------------------------------------------------------

fn String[]! Foo.main(String[] args)
{
    return 0;
}

================================================================================
returns_multiple_arguments
================================================================================

fn String[]! 
Foo.main(
String[] args, int* foo, List(<float>)     
bar, na   ,    varg...
) { return   0   ;}

--------------------------------------------------------------------------------

fn String[]! Foo.main(String[] args, int* foo, List(<float>) bar, na, varg...)
{
    return 0;
}

================================================================================
long_arguments
================================================================================

fn String[]! Foo.main(String[] args, int* foo, List(<float>) bar, MySuperClass[] last
) { return   0   ;}

--------------------------------------------------------------------------------

fn String[]! Foo.main(
    String[] args, int* foo, List(<float>) bar, MySuperClass[] last
)
{
    return 0;
}

================================================================================
long_arguments_multiline
================================================================================

fn String[]! Foo.main(SoTypeIsHuuuuuuge ok, String[] args, int* foo, List(<float>) bar, MySuperClass[] last, List(<ThisIsTooBig>) too_be_true
) { return   0   ;}

--------------------------------------------------------------------------------

fn String[]! Foo.main(
    SoTypeIsHuuuuuuge ok,
    String[] args,
    int* foo,
    List(<float>) bar,
    MySuperClass[] last,
    List(<ThisIsTooBig>) too_be_true
)
{
    return 0;
}

================================================================================
arguments_magic_comma
================================================================================

fn String[]! 
Foo.main(
String[] args, int* foo, List(<float>)     
bar, na   ,
) { return   0   ;}

--------------------------------------------------------------------------------

fn String[]! Foo.main(
    String[] args,
    int* foo,
    List(<float>) bar,
    na,
)
{
    return 0;
}

================================================================================
simple_main_docstring
================================================================================
<* My doc *>
fn void 
main() { return;}

--------------------------------------------------------------------------------

<* My doc *>
fn void main()
{
    return;
}

================================================================================
simple_main_docstring_multiline
================================================================================
<*
   My doc asdlkjad aiis is not formatted at                                all an used as is
*>


fn void 
main() { return;}

--------------------------------------------------------------------------------

<*
   My doc asdlkjad aiis is not formatted at                                all an used as is
*>
fn void main(
)
{
    return;
}

================================================================================
simple_main_docstring_only_contract
================================================================================
<* @require foo > 1 *>
fn void 
main() { return;}

--------------------------------------------------------------------------------

<* @require foo > 1 *>
fn void main()
{
    return;
}

================================================================================
simple_main_docstring_multi_contract
================================================================================
<* 
Descr @param @ensure ignored


@param [&in] i
@param num_foo "The number of foos."
@require foo==0, bar > 0 : "This is a stuff"
@require !foo : "This is a stuff"
@ensure foo==null, bar > 0 ``This is raw stuff``
@require foo > 1 
@return IoError.FOO, EioError.BAR
@return! IoError.FOO, EioError.BAR
@require $defined(resource.open, resource.open()),  ``Expected resource to have an "open" function``
@require resource != nil
@require $assignable(resource.open(), void*)
@mycustom "aoo" , "foo"
*>
fn void 
main() { return;}

--------------------------------------------------------------------------------

<* 
Descr @param @ensure ignored


@param [&in] i
@param num_foo "The number of foos."
@require foo == 0, bar > 0 : "This is a stuff"
@require !foo : "This is a stuff"
@ensure foo == null, bar > 0 ``This is raw stuff``
@require foo > 1
@return IoError.FOO, EioError.BAR
@return! IoError.FOO, EioError.BAR
@require $defined(resource.open, resource.open()), ``Expected resource to have an "open" function``
@require resource != nil
@require $assignable(resource.open(), void *)
@mycustom "aoo" , "foo"
*>
fn void main(
)
{
    return;
}

