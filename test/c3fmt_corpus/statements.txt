================================================================================
generic_statements
================================================================================

fn void main() 
{ 
int a = b;
b|= 10+a;
 io :: printf(   "soo"   , a   );
v  .  
    @call(a, b);
return;
}

--------------------------------------------------------------------------------

fn void main()
{
    int a = b;
    b |= 10 + a;
    io::printf("soo", a);
    v.@call(a, b);
    return;
}

================================================================================
expressions
================================================================================

fn void main() 
{ 
int a = b*2/1-1+3%1;
b%= 10+a;
b&=a;
b|=a;
b^=a;
b&&&a;
b|||a;
b+++a;
b/=a;
a==s;
a>=s;
a<=s;
a>=s;
a-=s;
a+=s;
a*=s;
a%=s;
a!=s;
a  ++  s;
--  a;
a<<1;
a>>1;
return;
}

--------------------------------------------------------------------------------

fn void main()
{
    int a = b * 2 / 1 - 1 + 3 % 1;
    b %= 10 + a;
    b &= a;
    b |= a;
    b ^= a;
    b &&& a;
    b ||| a;
    b +++ a;
    b /= a;
    a == s;
    a >= s;
    a <= s;
    a >= s;
    a -= s;
    a += s;
    a *= s;
    a %= s;
    a != s;
    a++s;
    --a;
    a << 1;
    a >> 1;
    return;
}

================================================================================
call_statement_single_line
================================================================================

fn void main() 
{ 
    io::printf("soo", a, sooo::  foo::bar  (    "adskjalsda", looooong, var));
    io::printf(
        "soo", a, 
        sooo::foo::bar("adskjalsda", looooong, var), another_var
    );
return;
}

--------------------------------------------------------------------------------

fn void main()
{
    io::printf("soo", a, sooo::foo::bar("adskjalsda", looooong, var));
    io::printf(
        "soo", a, sooo::foo::bar("adskjalsda", looooong, var), another_var
    );
    return;
}

================================================================================
double_long_call
================================================================================

fn void main() 
{ 
    return io::printf("soo", a, sooo::  foo::bar  (    "adskjalsda", looooong, var)) + 
    io::printf(
        "soo", a, 
        sooo::foo::bar("adskjalsda", looooong, var), another_var
    );
}

--------------------------------------------------------------------------------

fn void main()
{
    return io::printf(
        "soo",
        a,
        sooo::foo::bar("adskjalsda", looooong, var)
    ) + io::printf(
        "soo",
        a,
        sooo::foo::bar("adskjalsda", looooong, var),
        another_var
    );
}

================================================================================
arith_and_long_call
================================================================================

fn void main() 
{ 
    return 2 + foo_log_long + 
    io::printf(
        "soo", a, 
        sooo::foo::bar("adskjalsda", looooong, var), another_var
    ) + bar;
}

--------------------------------------------------------------------------------

fn void main()
{
    return 2 + foo_log_long + io::printf(
        "soo", a, sooo::foo::bar("adskjalsda", looooong, var), another_var
    ) + bar;
}

================================================================================
logical_with_calls_in_parens
================================================================================

fn void main() 
{ 
    return (foo_log_long || bar && 
    io::printf(
        "soo", a, 
        sooo::foo::bar("adskjalsda", looooong, var), another_var
    ) || bar);
}

--------------------------------------------------------------------------------

fn void main()
{
    return (
        foo_log_long ||
        bar &&
        io::printf("soo", a, sooo::foo::bar("adskjalsda", looooong, var), another_var) ||
        bar
    );
}

================================================================================
logical_with_calls_no_parens
================================================================================

fn void main() 
{ 
    return foo_log_long || bar && 
    io::printf(
        "soo", a, 
        sooo::foo::bar("adskjalsda", looooong, var), another_var
    ) || bar;
}

--------------------------------------------------------------------------------

fn void main()
{
    return foo_log_long || bar && io::printf(
        "soo",
        a,
        sooo::foo::bar("adskjalsda", looooong, var),
        another_var
    ) || bar;
}

================================================================================
chained_call
================================================================================

fn void main() 
{ 
    return 
    io::printf(
        "soo", a, 
        sooo::foo::bar("adskjalsda", looooong, var), another_var
    ).foo(a).bar(b).baz(c);
}

--------------------------------------------------------------------------------

fn void main()
{
    return io::printf(
        "soo",
        a,
        sooo::foo::bar("adskjalsda", looooong, var),
        another_var
    ).foo(
        a
    ).bar(
        b
    ).baz(
        c
    );
}

================================================================================
assignment_with_call
================================================================================

fn void main() 
{ 
    foo[call(some,1,4, very_long_parametesr, anothe_one)] =
    io::printf(
        "soo", a, 
        sooo::foo::bar("adskjalsda", looooong, var), another_var
    );
}

--------------------------------------------------------------------------------

fn void main()
{
    foo[call(some, 1, 4, very_long_parametesr, anothe_one)] = io::printf(
        "soo", a, sooo::foo::bar("adskjalsda", looooong, var), another_var
    );
}

================================================================================
assignment_left_too_long
================================================================================

fn void main() 
{ 
    foo[call(some,1,4, very_long_parametesr, anothe_one, "some stuff is going on it's too wide")] =
    io::printf(
        "soo", a, 
        sooo::foo::bar("adskjalsda", looooong, var), another_var
    );
}

--------------------------------------------------------------------------------

fn void main()
{
    foo[call(some, 1, 4, very_long_parametesr, anothe_one, "some stuff is going on it's too wide")] = io::printf(
        "soo", a, sooo::foo::bar("adskjalsda", looooong, var), another_var
    );
}

================================================================================
designated_initializers_struct
================================================================================

fn void main() 
{ 
    MyStruct foo = {.hello=1,.world =2};
}

--------------------------------------------------------------------------------

fn void main()
{
    MyStruct foo = {.hello = 1, .world = 2};
}

================================================================================
designated_initializers_struct_wrap
================================================================================

fn void main() 
{ 
    MyStruct foo = {.hello=1,.world =2, .anothe_call = io::prinf("hi there it's c3fmt")   };
}

--------------------------------------------------------------------------------

fn void main()
{
    MyStruct foo = {
        .hello = 1, .world = 2, .anothe_call = io::prinf("hi there it's c3fmt")
    };
}

================================================================================
designated_initializers_struct_wrap_multiline
================================================================================

fn void main() 
{ 
    MyStruct foo = {.question = "how long it could be", .hello=1,.world =2, .anothe_call = io::prinf("hi there it's c3fmt")  , this_is_a_lloong_field = (x & 12) };
}

--------------------------------------------------------------------------------

fn void main()
{
    MyStruct foo = {
        .question = "how long it could be",
        .hello = 1,
        .world = 2,
        .anothe_call = io::prinf("hi there it's c3fmt"),
        this_is_a_lloong_field = (x & 12)
    };
}

================================================================================
designated_initializers_with_sub_structs
================================================================================

fn void main() 
{ 
    MyStruct foo = {.question = "how long it could be",
        .sub = {.hello=1,.world =2, .sub_sub = {.foo = bar, .zoo= bas}, .anothe_call = io::prinf(Foo{.nowrap=true}, "hi there it's c3fmt")  , this_is_a_lloong_field = (x & 12) } };
}

--------------------------------------------------------------------------------

fn void main()
{
    MyStruct foo = {
        .question = "how long it could be",
        .sub = {
            .hello = 1,
            .world = 2,
            .sub_sub = {
                .foo = bar,
                .zoo = bas
            },
            .anothe_call = io::prinf(Foo{.nowrap = true}, "hi there it's c3fmt"),
            this_is_a_lloong_field = (x & 12)
        }
    };
}

================================================================================
if_statement_simple
================================================================================

fn void main() 
{ 
if(   
    doo)
    {
    return
    0;}
}

--------------------------------------------------------------------------------

fn void main()
{
    if (doo) {
        return 0;
    }
}

================================================================================
if_statement_simple_inside_if
================================================================================

fn void main() 
{ 
if(   
    doo)
    {
        if(foo){ return 1;}
    return
    0;}
return 200;
}

--------------------------------------------------------------------------------

fn void main()
{
    if (doo) {
        if (foo) {
            return 1;
        }
        return 0;
    }
    return 200;
}

================================================================================
if_statement_simple_sub_with_looong_condition
================================================================================

fn void main() 
{ 
if(   
    doo)
    {
        if(foo_bar(soo, okr) || fffff || zzz.another.foo(1, 2, 3) && a_little_bit ){ return 1;}
    return
    0;}
return 200;
}

--------------------------------------------------------------------------------

fn void main()
{
    if (doo) {
        if (
            foo_bar(soo, okr) ||
            fffff ||
            zzz.another.foo(1, 2, 3) &&
            a_little_bit
        ) {
            return 1;
        }
        return 0;
    }
    return 200;
}

================================================================================
if_statement_with_label
================================================================================

fn void main() 
{ 
if LABEL : (   
    doo)
    {
        if ANOTHER: (foo_bar(soo, okr) || fffff || zzz.another.foo(1, 2, 3) && a_little_bit ){ return 1;}
    return
    0;}
return 200;
}

--------------------------------------------------------------------------------

fn void main()
{
    if LABEL: (doo) {
        if ANOTHER: (
            foo_bar(soo, okr) ||
            fffff ||
            zzz.another.foo(1, 2, 3) &&
            a_little_bit
        ) {
            return 1;
        }
        return 0;
    }
    return 200;
}

================================================================================
if_single_line
================================================================================

fn void main() 
{ 
if LABEL : (   
    doo)
        zzz.another.foo(1, 2, 3);
return 200;
}

--------------------------------------------------------------------------------

fn void main()
{
    if LABEL: (doo) zzz.another.foo(1, 2, 3);
    return 200;
}

================================================================================
if_single_line_with_wrap
================================================================================

fn void main() 
{ 
if LABEL : (   
    doo)
        zzz.another.foo(whit_is_too_long, and_maybe(another, call, ther), 3);
return 200;
}

--------------------------------------------------------------------------------

fn void main()
{
    if LABEL: (doo) zzz.another.foo(
        whit_is_too_long, and_maybe(another, call, ther), 3
    );
    return 200;
}

================================================================================
if_else_simple
================================================================================

fn void main() 
{ 
if(   
    doo)
    {
    return
    0;} else   
    {
    return 3;
    }
}

--------------------------------------------------------------------------------

fn void main()
{
    if (doo) {
        return 0;
    } else {
        return 3;
    }
}

================================================================================
if_elseif_simple
================================================================================

fn void main() 
{ 
if(   
    doo)
    {
    return
    0;} else  if  (
    bar
    )
    {
    return 3;
    }
}

--------------------------------------------------------------------------------

fn void main()
{
    if (doo) {
        return 0;
    } else if (bar) {
        return 3;
    }
}

================================================================================
for_loop
================================================================================

fn void main() 
{ 
for(   
    int i=0;i< foo(call, some);i++)
    {
    return
    0;}} 

--------------------------------------------------------------------------------

fn void main()
{
    for (int i = 0; i < foo(call, some); i++) {
        return 0;
    }
}

================================================================================
for_loop_long_wrap_axis_semicol
================================================================================

fn void main() 
{ 
for(   
    int i=foo.launch(some, stuff, kwarg: in_loong);i< foo(call, some) && another_long_condition;i++)
    {
    return
    0;}} 

--------------------------------------------------------------------------------

fn void main()
{
    for (
        int i = foo.launch(some, stuff, kwarg: in_loong);
        i < foo(call, some) && another_long_condition;
        i++
    ) {
        return 0;
    }
}

================================================================================
for_loop_infinite
================================================================================

fn void main() 
{ 
for(   
    ; ; ;)
    {
    return
    0;}} 

--------------------------------------------------------------------------------

fn void main()
{
    for (;;;) {
        return 0;
    }
}

================================================================================
while_loop
================================================================================

fn void main() 
{ 
while(   
    foo.launch(some, stuff, kwarg: in_loong) || i< foo(call, some) && another_long_condition)
    {
    return
    0;}} 

--------------------------------------------------------------------------------

fn void main()
{
    while (
        foo.launch(some, stuff, kwarg: in_loong) ||
        i < foo(call, some) &&
        another_long_condition
    ) {
        return 0;
    }
}

================================================================================
foreach_loop
================================================================================

fn void main() 
{ 
foreach(i   ,    z :   
    foo.launch(some, stuff, kwarg: in_loong) || i< foo(call, some) && another_long_condition)
    {
    return
    0;}} 

--------------------------------------------------------------------------------

fn void main()
{
    foreach (
        i, z:
        foo.launch(some, stuff, kwarg: in_loong) || i < foo(call, some) && another_long_condition
    ) {
        return 0;
    }
}

================================================================================
foreach_r_loop
================================================================================

fn void main() 
{ 
  foreach_r   (i   ,    z :   
    foo.launch(some, stuff, kwarg: in_loong) || i< foo(call, some) && another_long_condition)
    {
    return
    0;}} 

--------------------------------------------------------------------------------

fn void main()
{
    foreach_r (
        i, z:
        foo.launch(some, stuff, kwarg: in_loong) || i < foo(call, some) && another_long_condition
    ) {
        return 0;
    }
}

================================================================================
defer_inline
================================================================================

fn void main() 
{ 
    defer foo.launch(some, stuff, kwarg: in_loong);
    return
    0;} 

--------------------------------------------------------------------------------

fn void main()
{
    defer  foo.launch(some, stuff, kwarg: in_loong);
    return 0;
}

================================================================================
defer_braces
================================================================================

fn void main() 
{ 
    defer { foo.launch(some, stuff, kwarg: in_loong);  if(too) {return 0;}}
    return
    0;} 

--------------------------------------------------------------------------------

fn void main()
{
    defer  {
        foo.launch(some, stuff, kwarg: in_loong);
        if (too) {
            return 0;
        }
    }
    return 0;
}

================================================================================
switch_empty
================================================================================

fn void main() 
{ 
    switch LABEL: (    foo.launch(
        some, stuff, 
        kwarg: in_loong) ) {  }  
    return
    0;} 

--------------------------------------------------------------------------------

fn void main()
{
    switch LABEL: (foo.launch(some, stuff, kwarg: in_loong)) {
    }
    return 0;
}

================================================================================
switch_empty_condition_wrap
================================================================================

fn void main() 
{ 
    switch LABEL: (    foo.launch(
        some, stuff, 
        kwarg: in_loong, this_is_another_looong_looong_field) ) {  }  
    return
    0;} 

--------------------------------------------------------------------------------

fn void main()
{
    switch LABEL: (
        foo.launch(some, stuff, kwarg: in_loong, this_is_another_looong_looong_field)
    ) {
    }
    return 0;
}

================================================================================
designated_initializers_struct_magic_comma
================================================================================

fn void main() 
{ 
    MyStruct foo = {.hello=1,.world =2,};
}

--------------------------------------------------------------------------------

fn void main()
{
    MyStruct foo = {
        .hello = 1,
        .world = 2,
    };
}

================================================================================
switch_with_cases_and_default
================================================================================

fn void main() 
{ 
    switch LABEL: (    foo.launch(
        some, stuff, 
        kwarg: in_loong) ) {  
            case FOO:
            bar();
            case BAR:
            case BAZ:
            case "another":
            case 922:
            case 1..0xffff:
            foo();
            default:  nextcase LABEL : FOO;
        }  
    return
    0;} 

--------------------------------------------------------------------------------

fn void main()
{
    switch LABEL: (foo.launch(some, stuff, kwarg: in_loong)) {
        case FOO:
            bar();
        case BAR:
        case BAZ:
        case "another":
        case 922:
        case 1..0xffff:
            foo();
        default:
            nextcase LABEL: FOO;
    }
    return 0;
}

================================================================================
switch_with_cases_in_braces
================================================================================

fn void main() 
{ 
    switch LABEL: (    foo.launch(
        some, stuff, 
        kwarg: in_loong) ) {  
            case FOO: {
            bar() ; }
            case BAR:
            case BAZ:
            case "another"   :

            case 922:
            case 1..0xffff:
            foo();
            default   : {  nextcase LABEL : FOO;  }
                
        }  
    return
    0;} 

--------------------------------------------------------------------------------

fn void main()
{
    switch LABEL: (foo.launch(some, stuff, kwarg: in_loong)) {
        case FOO: {
            bar();
        }
        case BAR:
        case BAZ:
        case "another":
            
        case 922:
        case 1..0xffff:
            foo();
        default: {
            nextcase LABEL: FOO;
        }
            
    }
    return 0;
}

================================================================================
scope_in_scope
================================================================================

fn void main() 
{ 
{  foo = 0;}

    return
    0;} 

--------------------------------------------------------------------------------

fn void main()
{
    {
        foo = 0;
    }
    
    return 0;
}

================================================================================
defer_catch
================================================================================

fn void main() 
{ 
defer (   catch 
err)
io::printfn("fault found: %s", err);

    return
    0;} 

--------------------------------------------------------------------------------

fn void main()
{
    defer (catch err) io::printfn("fault found: %s", err);
    
    return 0;
}

================================================================================
defer_catch_full_example
================================================================================

fn  char[   ]   ! test   ()
{
    defer (catch 
    err)
    {
        io::printfn("Excuse found: %s", 
        err);
        (void)   
        free(data);
            (t.type=
            EMPTY_LINE);
    }
    // Returns Excuse, memory gets freed
    return IoError.FILE_NOT_FOUND?;
}

--------------------------------------------------------------------------------

fn char[]! test()
{
    defer (catch err) {
        io::printfn("Excuse found: %s", err);
        (void)free(data);
        (t.type = EMPTY_LINE);
    }
    // Returns Excuse, memory gets freed
    return IoError.FILE_NOT_FOUND?;
}

================================================================================
defer_catch_no_paren
================================================================================

fn  char[   ]   ! test   ()
{
    defer catch
        io::printfn("Excuse found: %s", 
        err);
    return IoError.FILE_NOT_FOUND?;
}

--------------------------------------------------------------------------------

fn char[]! test()
{
    defer catch io::printfn("Excuse found: %s", err);
    return IoError.FILE_NOT_FOUND?;
}

================================================================================
defer_catch_braces
================================================================================

fn  char[   ]   ! test   ()
{
    defer catch 
        {io::printfn("Excuse found: %s", 
        err);}
    return IoError.FILE_NOT_FOUND?;
}

--------------------------------------------------------------------------------

fn char[]! test()
{
    defer catch {
        io::printfn("Excuse found: %s", err);
    }
    return IoError.FILE_NOT_FOUND?;
}

================================================================================
if_catch_return_excuse
================================================================================

fn  char[   ]   ! test   ()
{
if (catch excuse = foo(call, dab))
                {
            // Return the excuse with ? operator
    return excuse?;
    }
}

--------------------------------------------------------------------------------

fn char[]! test()
{
    if (catch excuse = foo(call, dab)) {
        // Return the excuse with ? operator
        return excuse?;
    }
}

================================================================================
if_catch_switch
================================================================================

fn void! test()
{
if (catch excuse = optional_value)
            {
    case NoHomework.DOG_ATE_MY_HOMEWORK:
                io::printn("Dog ate your file");
case IoError.FILE_NOT_FOUND:
            io::printn("File not found");
            default: {
            io::printfn("Unexpected Excuse: %s", excuse);
            return excuse?;}
    }
}

--------------------------------------------------------------------------------

fn void! test()
{
    if (catch excuse = optional_value) {
        case NoHomework.DOG_ATE_MY_HOMEWORK:
            io::printn("Dog ate your file");
        case IoError.FILE_NOT_FOUND:
            io::printn("File not found");
        default: {
            io::printfn("Unexpected Excuse: %s", excuse);
            return excuse?;
        }
    }
}

================================================================================
body_macro
================================================================================

fn  char[   ]   ! test   ()
{
        c.@foo( a, b ; xyz , abcj ) 
        { xyz[1] =    4;};
    return 0;
}

--------------------------------------------------------------------------------

fn char[]! test()
{
    c.@foo(a, b; xyz, abcj) {
        xyz[1] = 4;
    };
    return 0;
}

================================================================================
expr_block
================================================================================

fn  char[   ]   ! test   ()
{
    int foo = {| int a = 0; return a+1; |}  ! ;  
    return 0;
}

--------------------------------------------------------------------------------

fn char[]! test()
{
    int foo = {|
        int a = 0;
        return a + 1;
    |}!;
    return 0;
}

================================================================================
expr_block_bangbang
================================================================================

fn  char[   ]   ! test   ()
{
    int foo = {| int a = 0; return a+1; |}  !! ;  
    return 0;
}

--------------------------------------------------------------------------------

fn char[]! test()
{
    int foo = {|
        int a = 0;
        return a + 1;
    |}!!;
    return 0;
}

