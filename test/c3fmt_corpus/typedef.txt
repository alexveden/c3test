================================================================================
simple_struct
================================================================================

struct 
Person {
    char age;   String name; }
--------------------------------------------------------------------------------

struct Person
{
    char age;
    String name;
}

================================================================================
simple_sub_struct
================================================================================

struct 
Person @extern(  "foo") {
    struct foo // its a kinda struct
    { int bar; struct zoo @if(asd || dda) { int c;}}
    }
    struct Friend {
        bool or_foe;
    }
--------------------------------------------------------------------------------

struct Person @extern(  "foo")
{
    struct foo  // its a kinda struct
    {
        int bar;
        struct zoo @if(asd || dda)
        {
            int c;
        }
    }
}

struct Friend
{
    bool or_foe;
}

================================================================================
struct_union_inline
================================================================================

union
Person @extern(  "foo") {
inline    Pet    cat  ;
    struct foo // its a kinda struct
    { int bar; union zoo @if(asd || dda) { int  [34 ] c;}}
    }
--------------------------------------------------------------------------------

union Person @extern(  "foo")
{
    inline Pet cat;
    struct foo  // its a kinda struct
    {
        int bar;
        union zoo @if(asd || dda)
        {
            int[34] c;
        }
    }
}

================================================================================
bitstruct
================================================================================
bitstruct Foo: 
char 
@bigendian
{
    int a : 0..2;   int b : 4..6;   bool c : 7;
}
--------------------------------------------------------------------------------

bitstruct Foo : char @bigendian
{
    int a : 0..2;
    int b : 4..6;
    bool c : 7;
}

================================================================================
bitstruct_char_array
================================================================================
bitstruct Test2 : char[4] @bigendian
{
    ushort a : 0..15;
    ushort b : 16..31;
}
--------------------------------------------------------------------------------

bitstruct Test2 : char[4] @bigendian
{
    ushort a : 0..15;
    ushort b : 16..31;
}

================================================================================
simple_enum
================================================================================
enum State
{
    WAITING,    RUNNING,    TERMINATED
}
--------------------------------------------------------------------------------

enum State
{
    WAITING,
    RUNNING,
    TERMINATED
}

================================================================================
simple_enum_multi_comma
================================================================================
enum State:
int @test @if( asd || bar)
{
    WAITING,    RUNNING,    TERMINATED,
}
--------------------------------------------------------------------------------

enum State : int @test @if( asd || bar)
{
    WAITING,
    RUNNING,
    TERMINATED,
}

================================================================================
enum_associated
================================================================================
enum State : int @if("foo") (
String desc, bool active, Position pos
) @test
{
    WAITING    = { "waiting", false, { 1, 2} }, // this is a comment
    RUNNING    = { "running", true,  {12,22} },
    TERMINATED = { "ended",   false, {0, 0} },
}
--------------------------------------------------------------------------------

enum State : int @if("foo") (String desc, bool active, Position pos) @test
{
    WAITING = { "waiting", false, {1, 2} },  // this is a comment
    RUNNING = { "running", true, {12, 22} },
    TERMINATED = { "ended", false, {0, 0} },
}

================================================================================
enum_associated_definition_wrapping
================================================================================
enum State : int @if("foo") (
String desc, bool active, Position pos, FooooLong type, AnotherLoong Type, maybe_one_more
) @test
{
    WAITING    = { "waiting", false, {1, 2} }, // this is a comment
    RUNNING    = { "running", true,  {12,22} },
    TERMINATED = { "ended",   false, { 0, 0} },
}
--------------------------------------------------------------------------------

enum State : int @if("foo") (
    String desc,
    bool active,
    Position pos,
    FooooLong type,
    AnotherLoongType,
    maybe_one_more
) @test
{
    WAITING = { "waiting", false, {1, 2} },  // this is a comment
    RUNNING = { "running", true, {12, 22} },
    TERMINATED = { "ended", false, {0, 0} },
}

================================================================================
enum_associated_magic_comma
================================================================================
enum State : int @if("foo") (
String desc, bool active, Position pos
) @test
{
    WAITING    = { "waiting", false, {1, 2}, }, // this is a comment
    RUNNING    = { "running", true,  {12,22,} },
    TERMINATED = { "ended",   false, {0, 0} },
}
--------------------------------------------------------------------------------

enum State : int @if("foo") (String desc, bool active, Position pos) @test
{
    WAITING = {
        "waiting",
        false,
        {1, 2},
    },  // this is a comment
    RUNNING = { "running", true, {12, 22,} },
    TERMINATED = { "ended", false, {0, 0} },
}

================================================================================
fault_simple
================================================================================
fault Err
{
    OOPS, OOPS_WITH_COMMENT,   // this is an oops
    LOTS_OF_OOPS
}
--------------------------------------------------------------------------------

fault Err
{
    OOPS,
    OOPS_WITH_COMMENT,  // this is an oops
    LOTS_OF_OOPS
}

================================================================================
def_statement_global
================================================================================
def EnumSetType = $typefrom(private::type_for_enum_elements(Enum.elements)) @private;
def ElementTest = fn bool(Type *type, any context);
def TestFailFn = fn void! (bool to_fail);
def FormatTzTestSpec = Triple(<TzDateTime, DateTimeFormat, String>);
def IntList = ElasticArray(<int, 10>);
def BenchmarkFn = fn void!(int) @if($$OLD_TEST);
def @Align(y) = { @Align16(y / 2) };
def @Test = { @noinline };
--------------------------------------------------------------------------------

def EnumSetType = $typefrom(
    private::type_for_enum_elements(Enum.elements)
) @private;
def ElementTest = fn bool(Type* type, any context);
def TestFailFn = fn void!(bool to_fail);
def FormatTzTestSpec = Triple(<TzDateTime, DateTimeFormat, String>);
def IntList = ElasticArray(<int, 10>);
def BenchmarkFn = fn void!(int) @if($$OLD_TEST);
def @Align(y) = { @Align16(y / 2) };
def @Test = { @noinline };
================================================================================
def_interface
================================================================================
interface Printable @if("sasda")
{
    fn String* to_string(Allocator allocator) @optional;
    fn String to_new_string(Allocator allocator) @optional @deprecated("Use to_string");
    fn usz! to_format(Formatter* formatter) @optional;
    fn usz* to_format(Formatter* formatter, Alooong Type, Maybe can, bool wrap, please) @optional;
    fn usz* to_format(Formatter* formatter, Alooong Type, Maybe can, bool wrap, please, or_maybe multiline) @optional;
    fn usz* to_format(Formatter* magic_comma, ) @optional;
}
--------------------------------------------------------------------------------

interface Printable @if("sasda")
{
    fn String* to_string(Allocator allocator) @optional;
    fn String to_new_string(Allocator allocator) @optional @deprecated("Use to_string");
    fn usz! to_format(Formatter* formatter) @optional;
    fn usz* to_format(
        Formatter* formatter, AlooongType, Maybe can, bool wrap, please
    ) @optional;
    fn usz* to_format(
        Formatter* formatter,
        AlooongType,
        Maybe can,
        bool wrap,
        please,
        or_maybe multiline
    ) @optional;
    fn usz* to_format(
        Formatter* magic_comma,
    ) @optional;
}

================================================================================
distinct
================================================================================
distinct Color = float[<4>];
distinct TypeA = char[];
distinct Bob = inline Abc;
distinct Foo = fn void(Foo** x); // #error: cannot define a new function type
distinct Foo = inline PrivateFoo(<int>); // #error: could not be found
distinct PriorityQueue = inline PrivatePriorityQueue <[Type,false] >;
--------------------------------------------------------------------------------

distinct Color = float[<4>];
distinct TypeA = char[];
distinct Bob = inline Abc;
distinct Foo = fn void(Foo** x);  // #error: cannot define a new function type
distinct Foo = inline PrivateFoo(<int>);  // #error: could not be found
distinct PriorityQueue = inline PrivatePriorityQueue <[Type,false] >;
================================================================================
union_with_struct
================================================================================
union SourceSpan
{
    struct
    {
        char length;
        uint col;
        uint row;
    }
    ulong a;
}
--------------------------------------------------------------------------------

union SourceSpan
{
    struct
    {
        char length;
        uint col;
        uint row;
    }
    ulong a;
}

================================================================================
typeid_cases
================================================================================

extern typeid foo;

struct ReflectedParam (Printable) @if(!$defined(ReflectedParam))
{
    String name;
    typeid type;
}
def Time_t = $typefrom(env::WIN32 ? long.typeid : CLong.typeid);

macro bool @typeis(#value, $Type) @const @builtin => $typeof(#value).typeid == $Type.typeid;

fn typeid 
main( typeid t) { 
        $switch
        $case @is_vector(y) &&& $typeof(y).inner == float.typeid:
            return (float)x;
        $case $typeof(y).typeid == float.typeid:
            return (float)x;
        $default:
            return (double)x;
        $endswitch
return;}

--------------------------------------------------------------------------------

extern typeid foo;

struct ReflectedParam(Printable ) @if(!$defined(ReflectedParam))
{
    String name;
    typeid type;
}

def Time_t = $typefrom(env::WIN32? long.typeid : CLong.typeid);

macro bool @typeis(#value, $Type) @const @builtin => $typeof(#value).typeid == $Type.typeid;

fn typeid main(typeid t)
{

    $switch
        $case @is_vector(y) &&& $typeof(y).inner == float.typeid:
            return (float)x;
        $case $typeof(y).typeid == float.typeid:
            return (float)x;
        $default:
            return (double)x;
    $endswitch
    return;
}

