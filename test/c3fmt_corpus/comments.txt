================================================================================
simple_one_line_comment
================================================================================

fn void 
main() {
              //this simple comment
return;}

--------------------------------------------------------------------------------
fn void main()
{
    //this simple comment
    return;
}
================================================================================
simple_inline_comment
================================================================================

/// single one
fn void 
main() {  //this is a comment
return;}

--------------------------------------------------------------------------------
/// single one
fn void main()
{  //this is a comment
    return;
}
================================================================================
simple_inline_after_eos_comment
================================================================================

fn void 
main() {  
return;//this is inline comment       
// single line comment               
        if(fgoo) { return bar; // another inline coment
    } 
}

--------------------------------------------------------------------------------
fn void main()
{
    return;  //this is inline comment
    // single line comment
    if (fgoo) {
        return bar;  // another inline coment
    }
}
================================================================================
multiline_comments
================================================================================
/***
** Hi this is
a comment */
fn void 
main() {  
return/* inline comment before ; */;
    /* multi
    line comment {
    */
        if(fgoo) { return bar;         /* another inline comment */  } 
}

--------------------------------------------------------------------------------
/***
** Hi this is
a comment */
fn void main()
{
    return   /* inline comment before ; */
    ;
    /* multi
    line comment {
    */
    if (fgoo) {
        return bar;  /* another inline comment */
    }
}
================================================================================
comments_inside_func_args
================================================================================

fn String[]! 
Foo.main(
String[] args, int* foo, List(<float>) /* some */     
bar, na   ,    varg...
) { return   0   ;}

--------------------------------------------------------------------------------
fn String[]! Foo.main(
    String[] args,
    int* foo,
    List(<float>)   /* some */
    bar,
    na,
    varg...
)
{
    return 0;
}
================================================================================
comments_single_line_forces_multiline
================================================================================

fn String[]! 
Foo.main(
// coment
List(<float>)
bar, int a
) { return   0   ;}

--------------------------------------------------------------------------------
fn String[]! Foo.main(
    // coment
    List(<float>) bar,
    int a
)
{
    return 0;
}
================================================================================
comments_in_statements_inline
================================================================================

fn void main() {
if(this_a_condition && // do we have to comment next?
another_condition && /* maybe the followed by another */
      /* this another multiline */
foo
) { return 1;}
return   0   
;}

--------------------------------------------------------------------------------
fn void main()
{
    if (
        this_a_condition &&  // do we have to comment next?
        another_condition &&  /* maybe the followed by another */
        /* this another multiline */
        foo
    ) {
        return 1;
    }
    return 0;
}
================================================================================
in_call_comments
================================================================================
/***
** Hi this is
a comment */
fn void 
main() {  
    return foo(bar,  // a stuff,
            foofoo,  //another
            var,  // super var
    );
}

--------------------------------------------------------------------------------
/***
** Hi this is
a comment */
fn void main()
{
    return foo(
        bar,  // a stuff,
        foofoo,  //another
        var,  // super var
    );
}
================================================================================
comment_before_next_fn
================================================================================
fn void foo()
{

}

// comment TODO: maybe fix it?

fn bool bar()
{
}

--------------------------------------------------------------------------------
fn void foo()
{

}

// comment TODO: maybe fix it?

fn bool bar()
{
}
================================================================================
in_code_scope_mixed_with_empty_lines
================================================================================

fn void 
main() {  
return;//this is inline comment

// single line comment

        if(fgoo) { return bar; // another inline coment
    } 
}

--------------------------------------------------------------------------------
fn void main()
{
    return;  //this is inline comment

    // single line comment

    if (fgoo) {
        return bar;  // another inline coment
    }
}
================================================================================
if_inline_comments
================================================================================

fn void 
main() {  
        if(fgoo) // comment
        {
            return 0;
    }
}

--------------------------------------------------------------------------------
fn void main()
{
    if (fgoo)  // comment
    {
        return 0;
    }
}
================================================================================
comment_before_fn
================================================================================
fn void m() {}


// a comment
fn void main() {  
    return; //this is inline comment
}

--------------------------------------------------------------------------------
fn void m()
{
}

// a comment
fn void main()
{
    return;  //this is inline comment
}
================================================================================
array_with_multi_inline_comments
================================================================================

fn void main()
{
int[][4] wrapped_array = { 
(a + 1 + 3), /* 1 */ 
(b + 1 & 2), /* 2 */
(1 ||2&&3), /* 3 */ 
(boar + foo + aso), /* 4 */
};
}

--------------------------------------------------------------------------------
fn void main()
{
    int[][4] wrapped_array = {
        (a + 1 + 3),  /* 1 */
        (b + 1 & 2),  /* 2 */
        (1 || 2 && 3),  /* 3 */
        (boar + foo + aso),  /* 4 */
    };
}
================================================================================
designated_initializers_struct_single_comments_inside
================================================================================

fn void main() 
{ 
    MyStruct foo = {.hello=1,
    // comment
    .world =2};
}

--------------------------------------------------------------------------------
fn void main()
{
    MyStruct foo = {
        .hello = 1,
        // comment
        .world = 2
    };
}
================================================================================
designated_initializers_struct_inline_comments
================================================================================

fn void main() 
{ 
    MyStruct foo = {.hello=1, // world
    .world =2};
}

--------------------------------------------------------------------------------
fn void main()
{
    MyStruct foo = {
        .hello = 1,  // world
        .world = 2
    };
}
================================================================================
designated_initializers_struct_multi_comments_inside
================================================================================

fn void main() 
{ 
    MyStruct foo = {.hello=1,
    /* comment */
    .world =2};
}

--------------------------------------------------------------------------------
fn void main()
{
    MyStruct foo = {
        .hello = 1,
        /* comment */
        .world = 2
    };
}
================================================================================
designated_initializers_struct_multi_inline_comments_inside
================================================================================

fn void main() 
{ 
    MyStruct foo = {.hello=1, /* comment */
    .world =2};
}

--------------------------------------------------------------------------------
fn void main()
{
    MyStruct foo = {
        .hello = 1,  /* comment */
        .world = 2
    };
}
