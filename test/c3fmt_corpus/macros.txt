================================================================================
simple_macro
================================================================================

macro    

main() { return;}

--------------------------------------------------------------------------------

macro main()
{
    return;
}

================================================================================
simple_ct_macro
================================================================================

macro @m(
#x 

, y
)
{  #x = 2 * y;
}

--------------------------------------------------------------------------------

macro @m(#x, y)
{
    #x = 2 * y;
}

================================================================================
simple_macro_ct_type
================================================================================

macro size($Type)
{
    return $Type.sizeof + 

    int.sizeof;
}
--------------------------------------------------------------------------------

macro size($Type)
{
    return $Type.sizeof + int.sizeof;
}

================================================================================
simple_macro_body_definition
================================================================================

macro SomeType   * !
   @for_each(   list   ; @body(   it  ))
{
    for ($typeof(list)
    x = list; x;
    x = x.next)
    {
    @body(x);
    }
}
--------------------------------------------------------------------------------

macro SomeType*! @for_each(list; @body(it))
{
    for ($typeof(list) x = list; x; x = x.next) {
        @body(x);
    }
}

================================================================================
name_fields
================================================================================

macro usz @offset($Type, #field)
{
        $Type* t = null;
    return (usz)

    (uptr)  &    t   .   #field;
}

--------------------------------------------------------------------------------

macro usz @offset($Type, #field)
{
    $Type * t = null;
    return (usz)(uptr)&t.#field;
}

================================================================================
hash_macro
================================================================================

macro Foo.@check(#expr, $Type t, args...)
{
    if ( !  
    #expr)
    abort(
    $stringify(#expr
    ));
}

--------------------------------------------------------------------------------

macro Foo.@check(#expr, $Type t, args...)
{
    if (!#expr) abort($stringify(#expr));
}

================================================================================
hash_macro_with_contracts
================================================================================
<*
@require $defined(#a=#b,#b= #a)
*>
macro void @swap(#a,     #b)
{
        var temp = #a;
    #a = #b;
        #b = temp;
}

--------------------------------------------------------------------------------

<*
@require $defined(#a = #b, #b = #a)
*>
macro void @swap(#a, #b)
{
    var temp = #a;
    #a = #b;
    #b = temp;
}

================================================================================
ct_if_else
================================================================================
macro @foo($x, #y)
{
    $if $x > 3:
    #y += $x * $x;
    $endif

    $if $x > 3:  #y += $x * $x; $else  #y += $x; $endif
}
--------------------------------------------------------------------------------

macro @foo($x, #y)
{
    $if $x > 3:
        #y += $x * $x;
    $endif
    
    $if $x > 3:
        #y += $x * $x;
    $else
        #y += $x;
    $endif
}

