================================================================================
ct_if_else_inside_other
================================================================================
macro @foo($x, #y)
{
    $if $x > 3:
    #y += $x * $x;
        $if $x > 3:  #y += $x * $x; $else  #y += $x; $endif
    $endif

}
--------------------------------------------------------------------------------
macro @foo($x, #y)
{
    $if $x > 3:
        #y += $x * $x;
        $if $x > 3:
            #y += $x * $x;
        $else
            #y += $x;
        $endif
    $endif

}
================================================================================
ct_if_else
================================================================================
macro @foo($x, #y)
{
    $if $x > 3:
    #y += $x * $x;
    $endif

    $if $x > 3:  #y += $x * $x; $else  #y += $x; $endif
}
--------------------------------------------------------------------------------
macro @foo($x, #y)
{
    $if $x > 3:
        #y += $x * $x;
    $endif

    $if $x > 3:
        #y += $x * $x;
    $else
        #y += $x;
    $endif
}
================================================================================
ct_for_in_ct_scope
================================================================================
macro foo($a)
{
    $if $x > 3:
    $for (var $x = 0; $x < $a; $x++)
io::printfn("%d", $x);
    $endfor
    $endif
}

--------------------------------------------------------------------------------
macro foo($a)
{
    $if $x > 3:
        $for (var $x = 0; $x < $a; $x++)
            io::printfn("%d", $x);
        $endfor
    $endif
}
================================================================================
ct_foreach
================================================================================
macro foo_enum($SomeEnum)
{
    $if $x > 3:
    $foreach ($x : $SomeEnum.values)
    io::printfn("%d", (int)$x);
    $endforeach
    $endif
}

--------------------------------------------------------------------------------
macro foo_enum($SomeEnum)
{
    $if $x > 3:
        $foreach ($x : $SomeEnum.values)
            io::printfn("%d", (int)$x);
        $endforeach
    $endif
}
================================================================================
ct_switch
================================================================================
macro @foo($x, #y)
{
    $if $x > 3:
    $switch ($x)
        $case 0:
        $case 1:
            #y += $x * $x;
        $case 2:
            #y += $x;
        $case 3:
        $case $x > 10&&!$x:
            $if $x > 3:
            #y *= $x;
            $endif
        $default:
            #y -= $x;
    $endswitch
    $endif
}

--------------------------------------------------------------------------------
macro @foo($x, #y)
{
    $if $x > 3:
        $switch ($x)
            $case 0:
            $case 1:
                #y += $x * $x;
            $case 2:
                #y += $x;
            $case 3:
            $case $x > 10 && !$x:
                $if $x > 3:
                    #y *= $x;
                $endif
            $default:
                #y -= $x;
        $endswitch
    $endif
}
================================================================================
ct_switch_no_top_cond
================================================================================
macro @foo($x, #y)
{
    $if $x > 3:
    $switch
        $case 0:
        $case 1:
            #y += $x * $x;
            if(#y) { return 0;}
        $case 2:
            #y += $x;
        $case 3:
        $case $x > 10&&!$x:
            $if $x > 3:
            #y *= $x;
            $endif
        $default:
            #y -= $x;
    $endswitch
    $endif
}

--------------------------------------------------------------------------------
macro @foo($x, #y)
{
    $if $x > 3:
        $switch
            $case 0:
            $case 1:
                #y += $x * $x;
                if (#y) {
                    return 0;
                }
            $case 2:
                #y += $x;
            $case 3:
            $case $x > 10 && !$x:
                $if $x > 3:
                    #y *= $x;
                $endif
            $default:
                #y -= $x;
        $endswitch
    $endif
}
================================================================================
ct_if_call_colon_position
================================================================================
macro @foo($x, #y)
{
    $if type_is_overaligned(foo,bar: soo):
    #y += $x * $x;
    $endif
}
--------------------------------------------------------------------------------
macro @foo($x, #y)
{
    $if type_is_overaligned(foo, bar: soo):
        #y += $x * $x;
    $endif
}
================================================================================
ct_foreach_in_other
================================================================================
macro foo_enum($SomeEnum)
{
    $if $x > 3:
    $foreach ($x : $SomeEnum.values)
    $foreach ($x : $SomeEnum.values)
    io::printfn("%d", (int)$x);
    $endforeach
    $endforeach
    $endif
}

--------------------------------------------------------------------------------
macro foo_enum($SomeEnum)
{
    $if $x > 3:
        $foreach ($x : $SomeEnum.values)
            $foreach ($x : $SomeEnum.values)
                io::printfn("%d", (int)$x);
            $endforeach
        $endforeach
    $endif
}
================================================================================
ct_switch_in_other
================================================================================
macro @foo($x, #y)
{
    $switch ($x)
        $case 1:
            $switch ($x)
                $case 1:
                $default:
                    #y -= $x;
            $endswitch
        $default:
            #y -= $x;
            $switch ($x)
                $case 2:
                $default:
                    #y -= $x;
            $endswitch
    $endswitch
}
--------------------------------------------------------------------------------
macro @foo($x, #y)
{
    $switch ($x)
        $case 1:
            $switch ($x)
                $case 1:
                $default:
                    #y -= $x;
            $endswitch
        $default:
            #y -= $x;
            $switch ($x)
                $case 2:
                $default:
                    #y -= $x;
            $endswitch
    $endswitch
}
================================================================================
ct_if_hierarchical
================================================================================
fn Path! new_get_config_dir(Allocator allocator = allocator::heap())
{
    @pool(allocator)
    {
        $if env::WIN32:
            return path::new(get_var_temp("AppData"), allocator);
        $else
            $if env::DARWIN:
                String s = get_var_temp("HOME")!;
                const DIR = "Library/Application Support";
            $else
                String s = get_var_temp();
                const DIR = ".config";
            $endif
            return path::temp_new(s).new_append(DIR, allocator: allocator);
        $endif
    };
}
--------------------------------------------------------------------------------
fn Path! new_get_config_dir(Allocator allocator = allocator::heap())
{
    @pool(allocator) {
        $if env::WIN32:
            return path::new(get_var_temp("AppData"), allocator);
        $else
            $if env::DARWIN:
                String s = get_var_temp("HOME")!;
                const DIR = "Library/Application Support";
            $else
                String s = get_var_temp();
                const DIR = ".config";
            $endif
            return path::temp_new(s).new_append(DIR, allocator: allocator);
        $endif
    };
}
